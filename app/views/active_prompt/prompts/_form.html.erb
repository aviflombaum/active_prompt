<%= form_with(model: prompt, local: true, html: { class: "form" }) do |form| %>
  <% if prompt.errors.any? %>
    <div class="form__errors">
      <h3 class="text-danger">Please fix the following errors:</h3>
      <ul>
        <% prompt.errors.full_messages.each do |message| %>
          <li class="text-danger text-sm"><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="form__group">
    <%= form.label :name, class: "form__label form__label--required" %>
    <%= form.text_field :name, class: "form__input", required: true, 
        placeholder: "e.g., Customer Support Response" %>
    <div class="form__help">A descriptive name for this prompt</div>
  </div>

  <div class="form__group">
    <%= form.label :description, class: "form__label" %>
    <%= form.text_area :description, class: "form__textarea", rows: 2,
        placeholder: "Brief description of what this prompt does" %>
  </div>

  <div class="form__group">
    <%= form.label :system_message, "System Message", class: "form__label" %>
    <%= form.text_area :system_message, class: "form__textarea", rows: 4,
        placeholder: "Instructions for the AI system (optional)" %>
    <div class="form__help">Sets the behavior and context for the AI</div>
  </div>

  <div class="form__group">
    <%= form.label :content, "Prompt Content", class: "form__label form__label--required" %>
    <%= form.text_area :content, class: "form__textarea", rows: 6, required: true,
        placeholder: "The main prompt content that will be sent to the AI",
        data: { action: "input->variable-detector#detectVariables" } %>
    <div class="form__help">The main prompt template. Use {{variable_name}} syntax for variables.</div>
    <div id="detected-variables" class="detected-variables" style="display: none;">
      <h4>Detected Variables:</h4>
      <div id="variables-list"></div>
      <p class="form__help">These variables will be automatically created as parameters when you save.</p>
    </div>
  </div>

  <div class="form__inline">
    <div class="form__group">
      <%= form.label :model, "AI Model", class: "form__label" %>
      <%= form.select :model, 
          options_for_select([
            ["GPT-4", "gpt-4"],
            ["GPT-4 Turbo", "gpt-4-turbo-preview"],
            ["GPT-3.5 Turbo", "gpt-3.5-turbo"],
            ["Claude 3 Opus", "claude-3-opus"],
            ["Claude 3 Sonnet", "claude-3-sonnet"],
            ["Claude 3 Haiku", "claude-3-haiku"]
          ], prompt.model),
          { include_blank: "Select a model" },
          class: "form__select" %>
    </div>

    <div class="form__group">
      <%= form.label :temperature, class: "form__label" %>
      <%= form.number_field :temperature, class: "form__input", 
          step: 0.1, min: 0, max: 2, placeholder: "0.7" %>
      <div class="form__help">0-2 (default: 0.7)</div>
    </div>

    <div class="form__group">
      <%= form.label :max_tokens, "Max Tokens", class: "form__label" %>
      <%= form.number_field :max_tokens, class: "form__input", 
          min: 1, placeholder: "500" %>
      <div class="form__help">Maximum response length</div>
    </div>
  </div>

  <div class="form__group">
    <%= form.label :status, class: "form__label" %>
    <%= form.select :status, 
        options_for_select([
          ["Draft", "draft"],
          ["Active", "active"],
          ["Archived", "archived"]
        ], prompt.status),
        {},
        class: "form__select" %>
  </div>

  <div class="form__actions">
    <%= link_to "Cancel", prompts_path, class: "btn btn--secondary btn--medium" %>
    <%= form.submit prompt.new_record? ? "Create Prompt" : "Update Prompt", 
        class: "btn btn--primary btn--medium" %>
  </div>
<% end %>

<style>
  .form__errors {
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: var(--radius-md);
    padding: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
  }
  
  .form__errors h3 {
    font-size: var(--font-size-base);
    margin-bottom: var(--spacing-sm);
  }
  
  .form__errors ul {
    margin: 0;
    padding-left: var(--spacing-lg);
  }
  
  .detected-variables {
    background-color: var(--color-blue-50);
    border: 1px solid var(--color-blue-200);
    border-radius: var(--radius-md);
    padding: var(--spacing-md);
    margin-top: var(--spacing-sm);
  }
  
  .detected-variables h4 {
    font-size: var(--font-size-sm);
    font-weight: 600;
    margin-bottom: var(--spacing-xs);
    color: var(--color-blue-900);
  }
  
  .variable-tag {
    display: inline-block;
    background-color: var(--color-blue-100);
    color: var(--color-blue-800);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--radius-sm);
    font-size: var(--font-size-sm);
    font-family: monospace;
    margin-right: var(--spacing-xs);
    margin-bottom: var(--spacing-xs);
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const contentField = document.querySelector('[data-action="input->variable-detector#detectVariables"]');
  const detectedVariablesDiv = document.getElementById('detected-variables');
  const variablesList = document.getElementById('variables-list');
  
  function detectVariables() {
    const content = contentField.value;
    const variablePattern = /\{\{([a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)\}\}/g;
    const matches = [...content.matchAll(variablePattern)];
    const uniqueVariables = [...new Set(matches.map(match => match[1]))];
    
    if (uniqueVariables.length > 0) {
      detectedVariablesDiv.style.display = 'block';
      variablesList.innerHTML = uniqueVariables.map(variable => 
        `<span class="variable-tag">${variable}</span>`
      ).join('');
    } else {
      detectedVariablesDiv.style.display = 'none';
    }
  }
  
  if (contentField) {
    contentField.addEventListener('input', detectVariables);
    // Detect variables on page load
    detectVariables();
  }
});
</script>