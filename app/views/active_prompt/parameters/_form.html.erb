<%= form_with model: [@prompt, @parameter], class: "form" do |form| %>
  <% if @parameter.errors.any? %>
    <div class="alert alert--danger">
      <h4><%= pluralize(@parameter.errors.count, "error") %> prohibited this parameter from being saved:</h4>
      <ul>
        <% @parameter.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="form__section">
    <h3>Basic Information</h3>
    
    <div class="form__group">
      <%= form.label :name, class: "form__label" %>
      <%= form.text_field :name, 
          class: "form__input", 
          placeholder: "variable_name",
          pattern: "[a-zA-Z_][a-zA-Z0-9_]*",
          title: "Must start with letter or underscore, contain only letters, numbers, and underscores" %>
      <p class="form__hint">Variable name as it appears in the prompt (without {{ }})</p>
    </div>

    <div class="form__group">
      <%= form.label :description, class: "form__label" %>
      <%= form.text_area :description, 
          class: "form__input", 
          rows: 3,
          placeholder: "Describe what this parameter is used for" %>
    </div>

    <div class="form__row">
      <div class="form__group">
        <%= form.label :parameter_type, class: "form__label" %>
        <%= form.select :parameter_type, 
            options_for_select(ActivePrompt::Parameter::TYPES, @parameter.parameter_type),
            {}, 
            class: "form__input" %>
      </div>

      <div class="form__group">
        <%= form.label :required, class: "form__label" %>
        <div class="form__checkbox-group">
          <%= form.check_box :required, class: "form__checkbox" %>
          <%= form.label :required, "This parameter is required", class: "form__checkbox-label" %>
        </div>
      </div>
    </div>
  </div>

  <div class="form__section">
    <h3>Defaults and Examples</h3>

    <div class="form__group">
      <%= form.label :default_value, class: "form__label" %>
      <%= form.text_field :default_value, 
          class: "form__input",
          placeholder: "Default value when not provided" %>
      <p class="form__hint">Used when parameter is optional and no value is provided</p>
    </div>

    <div class="form__group">
      <%= form.label :example_value, class: "form__label" %>
      <%= form.text_field :example_value, 
          class: "form__input",
          placeholder: "Example value for documentation" %>
      <p class="form__hint">Shown as placeholder in forms</p>
    </div>

    <div class="form__group">
      <%= form.label :position, class: "form__label" %>
      <%= form.number_field :position, 
          class: "form__input",
          min: 1 %>
      <p class="form__hint">Order in which parameter appears in forms</p>
    </div>
  </div>

  <div class="form__section">
    <h3>Validation Rules (Optional)</h3>
    <p class="form__hint">Leave empty to skip validation</p>

    <div id="validation-rules" data-parameter-type="<%= @parameter.parameter_type %>">
      <div class="form__row validation-rule" data-types="string">
        <div class="form__group">
          <%= label_tag "parameter[validation_rules][min_length]", "Min Length", class: "form__label" %>
          <%= number_field_tag "parameter[validation_rules][min_length]", 
              @parameter.validation_rules&.dig('min_length'),
              class: "form__input",
              min: 0 %>
        </div>

        <div class="form__group">
          <%= label_tag "parameter[validation_rules][max_length]", "Max Length", class: "form__label" %>
          <%= number_field_tag "parameter[validation_rules][max_length]", 
              @parameter.validation_rules&.dig('max_length'),
              class: "form__input",
              min: 0 %>
        </div>
      </div>

      <div class="form__group validation-rule" data-types="string">
        <%= label_tag "parameter[validation_rules][pattern]", "Pattern (Regex)", class: "form__label" %>
        <%= text_field_tag "parameter[validation_rules][pattern]", 
            @parameter.validation_rules&.dig('pattern'),
            class: "form__input",
            placeholder: "e.g., ^[A-Z][a-z]+$" %>
        <p class="form__hint">Regular expression for validation</p>
      </div>

      <div class="form__row validation-rule" data-types="integer decimal">
        <div class="form__group">
          <%= label_tag "parameter[validation_rules][min]", "Min Value", class: "form__label" %>
          <%= number_field_tag "parameter[validation_rules][min]", 
              @parameter.validation_rules&.dig('min'),
              class: "form__input",
              step: "any" %>
        </div>

        <div class="form__group">
          <%= label_tag "parameter[validation_rules][max]", "Max Value", class: "form__label" %>
          <%= number_field_tag "parameter[validation_rules][max]", 
              @parameter.validation_rules&.dig('max'),
              class: "form__input",
              step: "any" %>
        </div>
      </div>
    </div>
  </div>

  <div class="form__actions">
    <%= form.submit class: "button button--primary" %>
    <%= link_to "Cancel", prompt_parameters_path(@prompt), class: "button button--secondary" %>
  </div>
<% end %>

<script>
  // Show/hide validation rules based on parameter type
  document.addEventListener('DOMContentLoaded', function() {
    const typeSelect = document.querySelector('#parameter_parameter_type');
    const validationSection = document.querySelector('#validation-rules');
    
    function updateValidationRules() {
      const selectedType = typeSelect.value;
      const allRules = validationSection.querySelectorAll('.validation-rule');
      
      allRules.forEach(rule => {
        const types = rule.dataset.types.split(' ');
        if (types.includes(selectedType)) {
          rule.style.display = '';
        } else {
          rule.style.display = 'none';
          // Clear hidden inputs
          rule.querySelectorAll('input').forEach(input => input.value = '');
        }
      });
    }
    
    typeSelect.addEventListener('change', updateValidationRules);
    updateValidationRules();
  });
</script>